name: test
on:
  push:
  pull_request:
    branches:
      - 'master'
      - 'release-[0-9]+.[0-9]+'
    paths-ignore:
      - 'contrib/**'

concurrency:
  group: ${{ github.workflow }}-${{ github.event_name == 'pull_request' && github.head_ref || github.repository_owner == 'neovim' && github.sha || github.ref_name }}
  cancel-in-progress: true

env:
  ASAN_OPTIONS: detect_leaks=1:check_initialization_order=1:log_path=${{ github.workspace }}/build/log/asan:intercept_tls_get_addr=0
  BIN_DIR: ${{ github.workspace }}/bin
  BUILD_DIR: ${{ github.workspace }}/build
  INSTALL_PREFIX: ${{ github.workspace }}/nvim-install
  LOG_DIR: ${{ github.workspace }}/build/log
  NVIM_LOG_FILE: ${{ github.workspace }}/build/.nvimlog
  TSAN_OPTIONS: log_path=${{ github.workspace }}/build/log/tsan
  UBSAN_OPTIONS: log_path=${{ github.workspace }}/build/log/ubsan
  VALGRIND_LOG: ${{ github.workspace }}/build/log/valgrind-%p.log
  # TEST_FILE: test/functional/core/startup_spec.lua
  # TEST_FILTER: foo

jobs:
  windows:
    runs-on: windows-2022
    timeout-minutes: 45
    name: windows
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/cache
      - run: .github/scripts/env.ps1

      - name: Build deps
        run: |
          cmake -S cmake.deps -B .deps -G Ninja -D CMAKE_BUILD_TYPE='RelWithDebInfo'
          cmake --build .deps

      - name: Build
        run: |
          cmake --preset ci -D CMAKE_BUILD_TYPE='RelWithDebInfo'
          cmake --build build

      - name: Install test deps
        run: |
          $PSNativeCommandArgumentPassing = 'Legacy'

          & build\bin\nvim.exe "--version"

          # Ensure that the "win32" feature is set.
          & build\bin\nvim -u NONE --headless -c 'exe !has(\"win32\").\"cq\"'

          python -m pip install pynvim
          # Sanity check
          python -c "import pynvim; print(str(pynvim))"

          node --version
          npm.cmd --version

          npm.cmd install -g neovim
          Get-Command -CommandType Application neovim-node-host.cmd
          npm.cmd link neovim

      - if: "!cancelled()"
        name: Determine if run should be aborted
        id: abort_job
        run: |
          "status=${{ job.status }}" >> $env:GITHUB_OUTPUT

      - if: success() || failure() && steps.abort_job.outputs.status == 'success'
        name: Test float_spec
        timeout-minutes: 3
        env:
          TEST_FILE: test/functional/ui/float_spec.lua
        run: cmake --build build --target functionaltest

      - if: success() || failure() && steps.abort_job.outputs.status == 'success'
        name: Test cursor_spec
        timeout-minutes: 1
        env:
          TEST_FILE: test/functional/ui/cursor_spec.lua
        run: cmake --build build --target functionaltest

      - if: success() || failure() && steps.abort_job.outputs.status == 'success'
        name: Test embed_spec
        timeout-minutes: 1
        env:
          TEST_FILE: test/functional/ui/embed_spec.lua
        run: cmake --build build --target functionaltest

      - if: success() || failure() && steps.abort_job.outputs.status == 'success'
        name: Test full
        timeout-minutes: 20
        run: cmake --build build --target functionaltest
